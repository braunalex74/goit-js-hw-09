{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEA,SAASC,EAAcC,EAAUC,EAAOC,GAWtC,OAVgB,IAAIC,SAAQ,SAACC,EAASC,GACpCC,YAAW,WACYC,KAAKC,SAAW,GAEnCJ,EAAQ,CAAEJ,WAAUC,UAEpBI,EAAO,CAAEL,WAAUC,S,GAEpBA,E,IAKP,IAAMQ,EAAOC,SAASC,cAAc,SAEpCF,EAAKG,iBAAiB,UAAU,SAAAC,GAC9BA,EAAMC,iBAMN,IALA,IAAMC,EAAW,IAAIC,SAASP,GACxBQ,EAAQC,SAASH,EAASI,IAAI,UAC9BjB,EAAOgB,SAASH,EAASI,IAAI,SAC7BC,EAASF,SAASH,EAASI,IAAI,WAE5BE,EAAI,EAAGA,EAAID,EAAQC,IAAK,CAE/BtB,EADiBsB,EAAI,EACGJ,EAAQI,EAAInB,GACjCoB,MAAK,SAAAC,G,IAAGvB,EAAQuB,EAARvB,SAAUC,EAAKsB,EAALtB,MACjBuB,EAAA3B,GAAS4B,OAAOC,QACd,sBAAuCC,OAAf3B,EAAS,QAAY2B,OAAN1B,EAAM,M,IAGhD2B,OAAM,SAAAL,G,IAAGvB,EAAQuB,EAARvB,SAAUC,EAAKsB,EAALtB,MAClBuB,EAAA3B,GAAS4B,OAAOI,QAAQ,qBAAsCF,OAAf3B,EAAS,QAAY2B,OAAN1B,EAAM,M","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nfunction createPromise(position, delay, step) {\n  const promise = new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shoulResolve = Math.random() > 0.3;\n      if (shoulResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n  return promise;\n}\n\nconst form = document.querySelector('.form');\n\nform.addEventListener('submit', event => {\n  event.preventDefault();\n  const formData = new FormData(form);\n  const delay = parseInt(formData.get('delay'));\n  const step = parseInt(formData.get('step'));\n  const amount = parseInt(formData.get('amount'));\n\n  for (let i = 0; i < amount; i++) {\n    const position = i + 1;\n    createPromise(position, delay + i * step)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(`❌Rejected promise ${position} in ${delay}ms`);\n      });\n  }\n});\n\n// const commandInputs = {\n//   form: document.querySelector('.form'),\n// };\n\n// commandInputs.form.addEventListener('submit', getFormData);\n\n// function getFormData(evt) {\n//   evt.preventDefault();\n//   const { delay, step, amount } = evt.currentTarget.elements;\n//   const promisesArray = new Array(Number(amount.value)).fill().map(index => {\n//     const position = index + 1;\n//     const promiseDelay = Number(delay.value) + index * Number(step.value);\n\n//     return createPromise(position, promiseDelay);\n//   });\n\n//   console.log(promisesArray); // ok\n\n//   promisesArray.forEach(promise => {\n//     promise\n//       .then(({ position, delay }) => {\n//         console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//       })\n//       .catch(({ position, delay }) => {\n//         console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//       });\n//   });\n// }\n\n// function createPromise(position, delay) {\n//   return new Promise((resolve, reject) => {\n//     setTimeout(() => {\n//       const shouldResolve = Math.random() > 0.3;\n\n//       if (!shouldResolve) {\n//         reject({ position, delay });\n//       }\n//       const result = { position, delay };\n//       resolve(result);\n//       const output = document.createElement('p');\n//       output.textContent = JSON.stringify(result);\n//       document.body.appendChild(output);\n//     }, delay);\n//   });\n// }\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","step","Promise","resolve","reject","setTimeout","Math","random","$ce04d3a99e08e73b$var$form","document","querySelector","addEventListener","event","preventDefault","formData","FormData","delay1","parseInt","get","amount","i","then","param","$parcel$interopDefault","Notify","success","concat","catch","failure"],"version":3,"file":"03-promises.59742e51.js.map"}